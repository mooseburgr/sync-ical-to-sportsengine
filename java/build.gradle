plugins {
  id 'java'
  id "io.freefair.lombok" version "6.5.1"
  id "com.diffplug.spotless" version "6.11.0"
}

repositories {
  google()
  mavenCentral()
}
configurations {
    invoker
}

dependencies {
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
  implementation 'org.slf4j:log4j-over-slf4j:2.0.4'

  // Every function needs this dependency to get the Functions Framework API.
  compileOnly 'com.google.cloud.functions:functions-framework-api:1.0.4'

  // To run function locally using Functions Framework's local invoker
  invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.2.0'

  // These dependencies are only used by the tests.
  testImplementation 'com.google.cloud.functions:functions-framework-api:1.0.4'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
  testImplementation 'com.google.truth:truth:1.1.3'
  testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'

}

// Register a "runFunction" task to run the function locally
tasks.register("runFunction", JavaExec) {
  main = 'com.google.cloud.functions.invoker.runner.Invoker'
  classpath(configurations.invoker)
  inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
  args(
    '--target', project.findProperty('run.functionTarget') ?: '',
    '--port', project.findProperty('run.port') ?: 8080
  )
  doFirst {
    args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
  }
}

spotless {
  java {
    googleJavaFormat()
  }
}